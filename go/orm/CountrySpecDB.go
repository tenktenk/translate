// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/tenktenk/translate/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_CountrySpec_sql sql.NullBool
var dummy_CountrySpec_time time.Duration
var dummy_CountrySpec_sort sort.Float64Slice

// CountrySpecAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model countryspecAPI
type CountrySpecAPI struct {
	gorm.Model

	models.CountrySpec

	// encoding of pointers
	CountrySpecPointersEnconding
}

// CountrySpecPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type CountrySpecPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// CountrySpecDB describes a countryspec in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model countryspecDB
type CountrySpecDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field countryspecDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field countryspecDB.NbBodies {{BasicKind}} (to be completed)
	NbBodies_Data sql.NullInt64

	// Declation for basic field countryspecDB.Step {{BasicKind}} (to be completed)
	Step_Data sql.NullInt64
	// encoding of pointers
	CountrySpecPointersEnconding
}

// CountrySpecDBs arrays countryspecDBs
// swagger:response countryspecDBsResponse
type CountrySpecDBs []CountrySpecDB

// CountrySpecDBResponse provides response
// swagger:response countryspecDBResponse
type CountrySpecDBResponse struct {
	CountrySpecDB
}

// CountrySpecWOP is a CountrySpec without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type CountrySpecWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	NbBodies int `xlsx:"2"`

	Step int `xlsx:"3"`
	// insertion for WOP pointer fields
}

var CountrySpec_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"NbBodies",
	"Step",
}

type BackRepoCountrySpecStruct struct {
	// stores CountrySpecDB according to their gorm ID
	Map_CountrySpecDBID_CountrySpecDB *map[uint]*CountrySpecDB

	// stores CountrySpecDB ID according to CountrySpec address
	Map_CountrySpecPtr_CountrySpecDBID *map[*models.CountrySpec]uint

	// stores CountrySpec according to their gorm ID
	Map_CountrySpecDBID_CountrySpecPtr *map[uint]*models.CountrySpec

	db *gorm.DB
}

func (backRepoCountrySpec *BackRepoCountrySpecStruct) GetDB() *gorm.DB {
	return backRepoCountrySpec.db
}

// GetCountrySpecDBFromCountrySpecPtr is a handy function to access the back repo instance from the stage instance
func (backRepoCountrySpec *BackRepoCountrySpecStruct) GetCountrySpecDBFromCountrySpecPtr(countryspec *models.CountrySpec) (countryspecDB *CountrySpecDB) {
	id := (*backRepoCountrySpec.Map_CountrySpecPtr_CountrySpecDBID)[countryspec]
	countryspecDB = (*backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecDB)[id]
	return
}

// BackRepoCountrySpec.Init set up the BackRepo of the CountrySpec
func (backRepoCountrySpec *BackRepoCountrySpecStruct) Init(db *gorm.DB) (Error error) {

	if backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecPtr != nil {
		err := errors.New("In Init, backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecPtr should be nil")
		return err
	}

	if backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecDB != nil {
		err := errors.New("In Init, backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecDB should be nil")
		return err
	}

	if backRepoCountrySpec.Map_CountrySpecPtr_CountrySpecDBID != nil {
		err := errors.New("In Init, backRepoCountrySpec.Map_CountrySpecPtr_CountrySpecDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.CountrySpec, 0)
	backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecPtr = &tmp

	tmpDB := make(map[uint]*CountrySpecDB, 0)
	backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecDB = &tmpDB

	tmpID := make(map[*models.CountrySpec]uint, 0)
	backRepoCountrySpec.Map_CountrySpecPtr_CountrySpecDBID = &tmpID

	backRepoCountrySpec.db = db
	return
}

// BackRepoCountrySpec.CommitPhaseOne commits all staged instances of CountrySpec to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCountrySpec *BackRepoCountrySpecStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for countryspec := range stage.CountrySpecs {
		backRepoCountrySpec.CommitPhaseOneInstance(countryspec)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, countryspec := range *backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecPtr {
		if _, ok := stage.CountrySpecs[countryspec]; !ok {
			backRepoCountrySpec.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoCountrySpec.CommitDeleteInstance commits deletion of CountrySpec to the BackRepo
func (backRepoCountrySpec *BackRepoCountrySpecStruct) CommitDeleteInstance(id uint) (Error error) {

	countryspec := (*backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecPtr)[id]

	// countryspec is not staged anymore, remove countryspecDB
	countryspecDB := (*backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecDB)[id]
	query := backRepoCountrySpec.db.Unscoped().Delete(&countryspecDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoCountrySpec.Map_CountrySpecPtr_CountrySpecDBID), countryspec)
	delete((*backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecPtr), id)
	delete((*backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecDB), id)

	return
}

// BackRepoCountrySpec.CommitPhaseOneInstance commits countryspec staged instances of CountrySpec to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCountrySpec *BackRepoCountrySpecStruct) CommitPhaseOneInstance(countryspec *models.CountrySpec) (Error error) {

	// check if the countryspec is not commited yet
	if _, ok := (*backRepoCountrySpec.Map_CountrySpecPtr_CountrySpecDBID)[countryspec]; ok {
		return
	}

	// initiate countryspec
	var countryspecDB CountrySpecDB
	countryspecDB.CopyBasicFieldsFromCountrySpec(countryspec)

	query := backRepoCountrySpec.db.Create(&countryspecDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoCountrySpec.Map_CountrySpecPtr_CountrySpecDBID)[countryspec] = countryspecDB.ID
	(*backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecPtr)[countryspecDB.ID] = countryspec
	(*backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecDB)[countryspecDB.ID] = &countryspecDB

	return
}

// BackRepoCountrySpec.CommitPhaseTwo commits all staged instances of CountrySpec to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCountrySpec *BackRepoCountrySpecStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, countryspec := range *backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecPtr {
		backRepoCountrySpec.CommitPhaseTwoInstance(backRepo, idx, countryspec)
	}

	return
}

// BackRepoCountrySpec.CommitPhaseTwoInstance commits {{structname }} of models.CountrySpec to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCountrySpec *BackRepoCountrySpecStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, countryspec *models.CountrySpec) (Error error) {

	// fetch matching countryspecDB
	if countryspecDB, ok := (*backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecDB)[idx]; ok {

		countryspecDB.CopyBasicFieldsFromCountrySpec(countryspec)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoCountrySpec.db.Save(&countryspecDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown CountrySpec intance %s", countryspec.Name))
		return err
	}

	return
}

// BackRepoCountrySpec.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoCountrySpec *BackRepoCountrySpecStruct) CheckoutPhaseOne() (Error error) {

	countryspecDBArray := make([]CountrySpecDB, 0)
	query := backRepoCountrySpec.db.Find(&countryspecDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	countryspecInstancesToBeRemovedFromTheStage := make(map[*models.CountrySpec]struct{})
	for key, value := range models.Stage.CountrySpecs {
		countryspecInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, countryspecDB := range countryspecDBArray {
		backRepoCountrySpec.CheckoutPhaseOneInstance(&countryspecDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		countryspec, ok := (*backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecPtr)[countryspecDB.ID]
		if ok {
			delete(countryspecInstancesToBeRemovedFromTheStage, countryspec)
		}
	}

	// remove from stage and back repo's 3 maps all countryspecs that are not in the checkout
	for countryspec := range countryspecInstancesToBeRemovedFromTheStage {
		countryspec.Unstage()

		// remove instance from the back repo 3 maps
		countryspecID := (*backRepoCountrySpec.Map_CountrySpecPtr_CountrySpecDBID)[countryspec]
		delete((*backRepoCountrySpec.Map_CountrySpecPtr_CountrySpecDBID), countryspec)
		delete((*backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecDB), countryspecID)
		delete((*backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecPtr), countryspecID)
	}

	return
}

// CheckoutPhaseOneInstance takes a countryspecDB that has been found in the DB, updates the backRepo and stages the
// models version of the countryspecDB
func (backRepoCountrySpec *BackRepoCountrySpecStruct) CheckoutPhaseOneInstance(countryspecDB *CountrySpecDB) (Error error) {

	countryspec, ok := (*backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecPtr)[countryspecDB.ID]
	if !ok {
		countryspec = new(models.CountrySpec)

		(*backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecPtr)[countryspecDB.ID] = countryspec
		(*backRepoCountrySpec.Map_CountrySpecPtr_CountrySpecDBID)[countryspec] = countryspecDB.ID

		// append model store with the new element
		countryspec.Name = countryspecDB.Name_Data.String
		countryspec.Stage()
	}
	countryspecDB.CopyBasicFieldsToCountrySpec(countryspec)

	// preserve pointer to countryspecDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_CountrySpecDBID_CountrySpecDB)[countryspecDB hold variable pointers
	countryspecDB_Data := *countryspecDB
	preservedPtrToCountrySpec := &countryspecDB_Data
	(*backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecDB)[countryspecDB.ID] = preservedPtrToCountrySpec

	return
}

// BackRepoCountrySpec.CheckoutPhaseTwo Checkouts all staged instances of CountrySpec to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCountrySpec *BackRepoCountrySpecStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, countryspecDB := range *backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecDB {
		backRepoCountrySpec.CheckoutPhaseTwoInstance(backRepo, countryspecDB)
	}
	return
}

// BackRepoCountrySpec.CheckoutPhaseTwoInstance Checkouts staged instances of CountrySpec to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCountrySpec *BackRepoCountrySpecStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, countryspecDB *CountrySpecDB) (Error error) {

	countryspec := (*backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecPtr)[countryspecDB.ID]
	_ = countryspec // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitCountrySpec allows commit of a single countryspec (if already staged)
func (backRepo *BackRepoStruct) CommitCountrySpec(countryspec *models.CountrySpec) {
	backRepo.BackRepoCountrySpec.CommitPhaseOneInstance(countryspec)
	if id, ok := (*backRepo.BackRepoCountrySpec.Map_CountrySpecPtr_CountrySpecDBID)[countryspec]; ok {
		backRepo.BackRepoCountrySpec.CommitPhaseTwoInstance(backRepo, id, countryspec)
	}
}

// CommitCountrySpec allows checkout of a single countryspec (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutCountrySpec(countryspec *models.CountrySpec) {
	// check if the countryspec is staged
	if _, ok := (*backRepo.BackRepoCountrySpec.Map_CountrySpecPtr_CountrySpecDBID)[countryspec]; ok {

		if id, ok := (*backRepo.BackRepoCountrySpec.Map_CountrySpecPtr_CountrySpecDBID)[countryspec]; ok {
			var countryspecDB CountrySpecDB
			countryspecDB.ID = id

			if err := backRepo.BackRepoCountrySpec.db.First(&countryspecDB, id).Error; err != nil {
				log.Panicln("CheckoutCountrySpec : Problem with getting object with id:", id)
			}
			backRepo.BackRepoCountrySpec.CheckoutPhaseOneInstance(&countryspecDB)
			backRepo.BackRepoCountrySpec.CheckoutPhaseTwoInstance(backRepo, &countryspecDB)
		}
	}
}

// CopyBasicFieldsFromCountrySpec
func (countryspecDB *CountrySpecDB) CopyBasicFieldsFromCountrySpec(countryspec *models.CountrySpec) {
	// insertion point for fields commit

	countryspecDB.Name_Data.String = countryspec.Name
	countryspecDB.Name_Data.Valid = true

	countryspecDB.NbBodies_Data.Int64 = int64(countryspec.NbBodies)
	countryspecDB.NbBodies_Data.Valid = true

	countryspecDB.Step_Data.Int64 = int64(countryspec.Step)
	countryspecDB.Step_Data.Valid = true
}

// CopyBasicFieldsFromCountrySpecWOP
func (countryspecDB *CountrySpecDB) CopyBasicFieldsFromCountrySpecWOP(countryspec *CountrySpecWOP) {
	// insertion point for fields commit

	countryspecDB.Name_Data.String = countryspec.Name
	countryspecDB.Name_Data.Valid = true

	countryspecDB.NbBodies_Data.Int64 = int64(countryspec.NbBodies)
	countryspecDB.NbBodies_Data.Valid = true

	countryspecDB.Step_Data.Int64 = int64(countryspec.Step)
	countryspecDB.Step_Data.Valid = true
}

// CopyBasicFieldsToCountrySpec
func (countryspecDB *CountrySpecDB) CopyBasicFieldsToCountrySpec(countryspec *models.CountrySpec) {
	// insertion point for checkout of basic fields (back repo to stage)
	countryspec.Name = countryspecDB.Name_Data.String
	countryspec.NbBodies = int(countryspecDB.NbBodies_Data.Int64)
	countryspec.Step = int(countryspecDB.Step_Data.Int64)
}

// CopyBasicFieldsToCountrySpecWOP
func (countryspecDB *CountrySpecDB) CopyBasicFieldsToCountrySpecWOP(countryspec *CountrySpecWOP) {
	countryspec.ID = int(countryspecDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	countryspec.Name = countryspecDB.Name_Data.String
	countryspec.NbBodies = int(countryspecDB.NbBodies_Data.Int64)
	countryspec.Step = int(countryspecDB.Step_Data.Int64)
}

// Backup generates a json file from a slice of all CountrySpecDB instances in the backrepo
func (backRepoCountrySpec *BackRepoCountrySpecStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "CountrySpecDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CountrySpecDB, 0)
	for _, countryspecDB := range *backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecDB {
		forBackup = append(forBackup, countryspecDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json CountrySpec ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json CountrySpec file", err.Error())
	}
}

// Backup generates a json file from a slice of all CountrySpecDB instances in the backrepo
func (backRepoCountrySpec *BackRepoCountrySpecStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CountrySpecDB, 0)
	for _, countryspecDB := range *backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecDB {
		forBackup = append(forBackup, countryspecDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("CountrySpec")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&CountrySpec_Fields, -1)
	for _, countryspecDB := range forBackup {

		var countryspecWOP CountrySpecWOP
		countryspecDB.CopyBasicFieldsToCountrySpecWOP(&countryspecWOP)

		row := sh.AddRow()
		row.WriteStruct(&countryspecWOP, -1)
	}
}

// RestoreXL from the "CountrySpec" sheet all CountrySpecDB instances
func (backRepoCountrySpec *BackRepoCountrySpecStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoCountrySpecid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["CountrySpec"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoCountrySpec.rowVisitorCountrySpec)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoCountrySpec *BackRepoCountrySpecStruct) rowVisitorCountrySpec(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var countryspecWOP CountrySpecWOP
		row.ReadStruct(&countryspecWOP)

		// add the unmarshalled struct to the stage
		countryspecDB := new(CountrySpecDB)
		countryspecDB.CopyBasicFieldsFromCountrySpecWOP(&countryspecWOP)

		countryspecDB_ID_atBackupTime := countryspecDB.ID
		countryspecDB.ID = 0
		query := backRepoCountrySpec.db.Create(countryspecDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecDB)[countryspecDB.ID] = countryspecDB
		BackRepoCountrySpecid_atBckpTime_newID[countryspecDB_ID_atBackupTime] = countryspecDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "CountrySpecDB.json" in dirPath that stores an array
// of CountrySpecDB and stores it in the database
// the map BackRepoCountrySpecid_atBckpTime_newID is updated accordingly
func (backRepoCountrySpec *BackRepoCountrySpecStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoCountrySpecid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "CountrySpecDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json CountrySpec file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*CountrySpecDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_CountrySpecDBID_CountrySpecDB
	for _, countryspecDB := range forRestore {

		countryspecDB_ID_atBackupTime := countryspecDB.ID
		countryspecDB.ID = 0
		query := backRepoCountrySpec.db.Create(countryspecDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecDB)[countryspecDB.ID] = countryspecDB
		BackRepoCountrySpecid_atBckpTime_newID[countryspecDB_ID_atBackupTime] = countryspecDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json CountrySpec file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<CountrySpec>id_atBckpTime_newID
// to compute new index
func (backRepoCountrySpec *BackRepoCountrySpecStruct) RestorePhaseTwo() {

	for _, countryspecDB := range *backRepoCountrySpec.Map_CountrySpecDBID_CountrySpecDB {

		// next line of code is to avert unused variable compilation error
		_ = countryspecDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoCountrySpec.db.Model(countryspecDB).Updates(*countryspecDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoCountrySpecid_atBckpTime_newID map[uint]uint
