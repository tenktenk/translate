// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/tenktenk/translate/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Translation_sql sql.NullBool
var dummy_Translation_time time.Duration
var dummy_Translation_sort sort.Float64Slice

// TranslationAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model translationAPI
type TranslationAPI struct {
	gorm.Model

	models.Translation

	// encoding of pointers
	TranslationPointersEnconding
}

// TranslationPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TranslationPointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// field SourceCountryWithBodies is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SourceCountryWithBodiesID sql.NullInt64

	// field TargetCountryWithBodies is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	TargetCountryWithBodiesID sql.NullInt64
}

// TranslationDB describes a translation in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model translationDB
type TranslationDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field translationDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString
	// encoding of pointers
	TranslationPointersEnconding
}

// TranslationDBs arrays translationDBs
// swagger:response translationDBsResponse
type TranslationDBs []TranslationDB

// TranslationDBResponse provides response
// swagger:response translationDBResponse
type TranslationDBResponse struct {
	TranslationDB
}

// TranslationWOP is a Translation without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type TranslationWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Translation_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoTranslationStruct struct {
	// stores TranslationDB according to their gorm ID
	Map_TranslationDBID_TranslationDB *map[uint]*TranslationDB

	// stores TranslationDB ID according to Translation address
	Map_TranslationPtr_TranslationDBID *map[*models.Translation]uint

	// stores Translation according to their gorm ID
	Map_TranslationDBID_TranslationPtr *map[uint]*models.Translation

	db *gorm.DB
}

func (backRepoTranslation *BackRepoTranslationStruct) GetDB() *gorm.DB {
	return backRepoTranslation.db
}

// GetTranslationDBFromTranslationPtr is a handy function to access the back repo instance from the stage instance
func (backRepoTranslation *BackRepoTranslationStruct) GetTranslationDBFromTranslationPtr(translation *models.Translation) (translationDB *TranslationDB) {
	id := (*backRepoTranslation.Map_TranslationPtr_TranslationDBID)[translation]
	translationDB = (*backRepoTranslation.Map_TranslationDBID_TranslationDB)[id]
	return
}

// BackRepoTranslation.Init set up the BackRepo of the Translation
func (backRepoTranslation *BackRepoTranslationStruct) Init(db *gorm.DB) (Error error) {

	if backRepoTranslation.Map_TranslationDBID_TranslationPtr != nil {
		err := errors.New("In Init, backRepoTranslation.Map_TranslationDBID_TranslationPtr should be nil")
		return err
	}

	if backRepoTranslation.Map_TranslationDBID_TranslationDB != nil {
		err := errors.New("In Init, backRepoTranslation.Map_TranslationDBID_TranslationDB should be nil")
		return err
	}

	if backRepoTranslation.Map_TranslationPtr_TranslationDBID != nil {
		err := errors.New("In Init, backRepoTranslation.Map_TranslationPtr_TranslationDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Translation, 0)
	backRepoTranslation.Map_TranslationDBID_TranslationPtr = &tmp

	tmpDB := make(map[uint]*TranslationDB, 0)
	backRepoTranslation.Map_TranslationDBID_TranslationDB = &tmpDB

	tmpID := make(map[*models.Translation]uint, 0)
	backRepoTranslation.Map_TranslationPtr_TranslationDBID = &tmpID

	backRepoTranslation.db = db
	return
}

// BackRepoTranslation.CommitPhaseOne commits all staged instances of Translation to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTranslation *BackRepoTranslationStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for translation := range stage.Translations {
		backRepoTranslation.CommitPhaseOneInstance(translation)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, translation := range *backRepoTranslation.Map_TranslationDBID_TranslationPtr {
		if _, ok := stage.Translations[translation]; !ok {
			backRepoTranslation.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTranslation.CommitDeleteInstance commits deletion of Translation to the BackRepo
func (backRepoTranslation *BackRepoTranslationStruct) CommitDeleteInstance(id uint) (Error error) {

	translation := (*backRepoTranslation.Map_TranslationDBID_TranslationPtr)[id]

	// translation is not staged anymore, remove translationDB
	translationDB := (*backRepoTranslation.Map_TranslationDBID_TranslationDB)[id]
	query := backRepoTranslation.db.Unscoped().Delete(&translationDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoTranslation.Map_TranslationPtr_TranslationDBID), translation)
	delete((*backRepoTranslation.Map_TranslationDBID_TranslationPtr), id)
	delete((*backRepoTranslation.Map_TranslationDBID_TranslationDB), id)

	return
}

// BackRepoTranslation.CommitPhaseOneInstance commits translation staged instances of Translation to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTranslation *BackRepoTranslationStruct) CommitPhaseOneInstance(translation *models.Translation) (Error error) {

	// check if the translation is not commited yet
	if _, ok := (*backRepoTranslation.Map_TranslationPtr_TranslationDBID)[translation]; ok {
		return
	}

	// initiate translation
	var translationDB TranslationDB
	translationDB.CopyBasicFieldsFromTranslation(translation)

	query := backRepoTranslation.db.Create(&translationDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoTranslation.Map_TranslationPtr_TranslationDBID)[translation] = translationDB.ID
	(*backRepoTranslation.Map_TranslationDBID_TranslationPtr)[translationDB.ID] = translation
	(*backRepoTranslation.Map_TranslationDBID_TranslationDB)[translationDB.ID] = &translationDB

	return
}

// BackRepoTranslation.CommitPhaseTwo commits all staged instances of Translation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTranslation *BackRepoTranslationStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, translation := range *backRepoTranslation.Map_TranslationDBID_TranslationPtr {
		backRepoTranslation.CommitPhaseTwoInstance(backRepo, idx, translation)
	}

	return
}

// BackRepoTranslation.CommitPhaseTwoInstance commits {{structname }} of models.Translation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTranslation *BackRepoTranslationStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, translation *models.Translation) (Error error) {

	// fetch matching translationDB
	if translationDB, ok := (*backRepoTranslation.Map_TranslationDBID_TranslationDB)[idx]; ok {

		translationDB.CopyBasicFieldsFromTranslation(translation)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value translation.SourceCountryWithBodies translates to updating the translation.SourceCountryWithBodiesID
		translationDB.SourceCountryWithBodiesID.Valid = true // allow for a 0 value (nil association)
		if translation.SourceCountryWithBodies != nil {
			if SourceCountryWithBodiesId, ok := (*backRepo.BackRepoCountryWithBodies.Map_CountryWithBodiesPtr_CountryWithBodiesDBID)[translation.SourceCountryWithBodies]; ok {
				translationDB.SourceCountryWithBodiesID.Int64 = int64(SourceCountryWithBodiesId)
				translationDB.SourceCountryWithBodiesID.Valid = true
			}
		}

		// commit pointer value translation.TargetCountryWithBodies translates to updating the translation.TargetCountryWithBodiesID
		translationDB.TargetCountryWithBodiesID.Valid = true // allow for a 0 value (nil association)
		if translation.TargetCountryWithBodies != nil {
			if TargetCountryWithBodiesId, ok := (*backRepo.BackRepoCountryWithBodies.Map_CountryWithBodiesPtr_CountryWithBodiesDBID)[translation.TargetCountryWithBodies]; ok {
				translationDB.TargetCountryWithBodiesID.Int64 = int64(TargetCountryWithBodiesId)
				translationDB.TargetCountryWithBodiesID.Valid = true
			}
		}

		query := backRepoTranslation.db.Save(&translationDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Translation intance %s", translation.Name))
		return err
	}

	return
}

// BackRepoTranslation.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoTranslation *BackRepoTranslationStruct) CheckoutPhaseOne() (Error error) {

	translationDBArray := make([]TranslationDB, 0)
	query := backRepoTranslation.db.Find(&translationDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	translationInstancesToBeRemovedFromTheStage := make(map[*models.Translation]struct{})
	for key, value := range models.Stage.Translations {
		translationInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, translationDB := range translationDBArray {
		backRepoTranslation.CheckoutPhaseOneInstance(&translationDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		translation, ok := (*backRepoTranslation.Map_TranslationDBID_TranslationPtr)[translationDB.ID]
		if ok {
			delete(translationInstancesToBeRemovedFromTheStage, translation)
		}
	}

	// remove from stage and back repo's 3 maps all translations that are not in the checkout
	for translation := range translationInstancesToBeRemovedFromTheStage {
		translation.Unstage()

		// remove instance from the back repo 3 maps
		translationID := (*backRepoTranslation.Map_TranslationPtr_TranslationDBID)[translation]
		delete((*backRepoTranslation.Map_TranslationPtr_TranslationDBID), translation)
		delete((*backRepoTranslation.Map_TranslationDBID_TranslationDB), translationID)
		delete((*backRepoTranslation.Map_TranslationDBID_TranslationPtr), translationID)
	}

	return
}

// CheckoutPhaseOneInstance takes a translationDB that has been found in the DB, updates the backRepo and stages the
// models version of the translationDB
func (backRepoTranslation *BackRepoTranslationStruct) CheckoutPhaseOneInstance(translationDB *TranslationDB) (Error error) {

	translation, ok := (*backRepoTranslation.Map_TranslationDBID_TranslationPtr)[translationDB.ID]
	if !ok {
		translation = new(models.Translation)

		(*backRepoTranslation.Map_TranslationDBID_TranslationPtr)[translationDB.ID] = translation
		(*backRepoTranslation.Map_TranslationPtr_TranslationDBID)[translation] = translationDB.ID

		// append model store with the new element
		translation.Name = translationDB.Name_Data.String
		translation.Stage()
	}
	translationDB.CopyBasicFieldsToTranslation(translation)

	// preserve pointer to translationDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_TranslationDBID_TranslationDB)[translationDB hold variable pointers
	translationDB_Data := *translationDB
	preservedPtrToTranslation := &translationDB_Data
	(*backRepoTranslation.Map_TranslationDBID_TranslationDB)[translationDB.ID] = preservedPtrToTranslation

	return
}

// BackRepoTranslation.CheckoutPhaseTwo Checkouts all staged instances of Translation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTranslation *BackRepoTranslationStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, translationDB := range *backRepoTranslation.Map_TranslationDBID_TranslationDB {
		backRepoTranslation.CheckoutPhaseTwoInstance(backRepo, translationDB)
	}
	return
}

// BackRepoTranslation.CheckoutPhaseTwoInstance Checkouts staged instances of Translation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTranslation *BackRepoTranslationStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, translationDB *TranslationDB) (Error error) {

	translation := (*backRepoTranslation.Map_TranslationDBID_TranslationPtr)[translationDB.ID]
	_ = translation // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// SourceCountryWithBodies field
	if translationDB.SourceCountryWithBodiesID.Int64 != 0 {
		translation.SourceCountryWithBodies = (*backRepo.BackRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesPtr)[uint(translationDB.SourceCountryWithBodiesID.Int64)]
	}
	// TargetCountryWithBodies field
	if translationDB.TargetCountryWithBodiesID.Int64 != 0 {
		translation.TargetCountryWithBodies = (*backRepo.BackRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesPtr)[uint(translationDB.TargetCountryWithBodiesID.Int64)]
	}
	return
}

// CommitTranslation allows commit of a single translation (if already staged)
func (backRepo *BackRepoStruct) CommitTranslation(translation *models.Translation) {
	backRepo.BackRepoTranslation.CommitPhaseOneInstance(translation)
	if id, ok := (*backRepo.BackRepoTranslation.Map_TranslationPtr_TranslationDBID)[translation]; ok {
		backRepo.BackRepoTranslation.CommitPhaseTwoInstance(backRepo, id, translation)
	}
}

// CommitTranslation allows checkout of a single translation (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTranslation(translation *models.Translation) {
	// check if the translation is staged
	if _, ok := (*backRepo.BackRepoTranslation.Map_TranslationPtr_TranslationDBID)[translation]; ok {

		if id, ok := (*backRepo.BackRepoTranslation.Map_TranslationPtr_TranslationDBID)[translation]; ok {
			var translationDB TranslationDB
			translationDB.ID = id

			if err := backRepo.BackRepoTranslation.db.First(&translationDB, id).Error; err != nil {
				log.Panicln("CheckoutTranslation : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTranslation.CheckoutPhaseOneInstance(&translationDB)
			backRepo.BackRepoTranslation.CheckoutPhaseTwoInstance(backRepo, &translationDB)
		}
	}
}

// CopyBasicFieldsFromTranslation
func (translationDB *TranslationDB) CopyBasicFieldsFromTranslation(translation *models.Translation) {
	// insertion point for fields commit

	translationDB.Name_Data.String = translation.Name
	translationDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTranslationWOP
func (translationDB *TranslationDB) CopyBasicFieldsFromTranslationWOP(translation *TranslationWOP) {
	// insertion point for fields commit

	translationDB.Name_Data.String = translation.Name
	translationDB.Name_Data.Valid = true
}

// CopyBasicFieldsToTranslation
func (translationDB *TranslationDB) CopyBasicFieldsToTranslation(translation *models.Translation) {
	// insertion point for checkout of basic fields (back repo to stage)
	translation.Name = translationDB.Name_Data.String
}

// CopyBasicFieldsToTranslationWOP
func (translationDB *TranslationDB) CopyBasicFieldsToTranslationWOP(translation *TranslationWOP) {
	translation.ID = int(translationDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	translation.Name = translationDB.Name_Data.String
}

// Backup generates a json file from a slice of all TranslationDB instances in the backrepo
func (backRepoTranslation *BackRepoTranslationStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "TranslationDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TranslationDB, 0)
	for _, translationDB := range *backRepoTranslation.Map_TranslationDBID_TranslationDB {
		forBackup = append(forBackup, translationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Translation ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Translation file", err.Error())
	}
}

// Backup generates a json file from a slice of all TranslationDB instances in the backrepo
func (backRepoTranslation *BackRepoTranslationStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TranslationDB, 0)
	for _, translationDB := range *backRepoTranslation.Map_TranslationDBID_TranslationDB {
		forBackup = append(forBackup, translationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Translation")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Translation_Fields, -1)
	for _, translationDB := range forBackup {

		var translationWOP TranslationWOP
		translationDB.CopyBasicFieldsToTranslationWOP(&translationWOP)

		row := sh.AddRow()
		row.WriteStruct(&translationWOP, -1)
	}
}

// RestoreXL from the "Translation" sheet all TranslationDB instances
func (backRepoTranslation *BackRepoTranslationStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTranslationid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Translation"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTranslation.rowVisitorTranslation)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoTranslation *BackRepoTranslationStruct) rowVisitorTranslation(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var translationWOP TranslationWOP
		row.ReadStruct(&translationWOP)

		// add the unmarshalled struct to the stage
		translationDB := new(TranslationDB)
		translationDB.CopyBasicFieldsFromTranslationWOP(&translationWOP)

		translationDB_ID_atBackupTime := translationDB.ID
		translationDB.ID = 0
		query := backRepoTranslation.db.Create(translationDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoTranslation.Map_TranslationDBID_TranslationDB)[translationDB.ID] = translationDB
		BackRepoTranslationid_atBckpTime_newID[translationDB_ID_atBackupTime] = translationDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "TranslationDB.json" in dirPath that stores an array
// of TranslationDB and stores it in the database
// the map BackRepoTranslationid_atBckpTime_newID is updated accordingly
func (backRepoTranslation *BackRepoTranslationStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTranslationid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "TranslationDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Translation file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*TranslationDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_TranslationDBID_TranslationDB
	for _, translationDB := range forRestore {

		translationDB_ID_atBackupTime := translationDB.ID
		translationDB.ID = 0
		query := backRepoTranslation.db.Create(translationDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoTranslation.Map_TranslationDBID_TranslationDB)[translationDB.ID] = translationDB
		BackRepoTranslationid_atBckpTime_newID[translationDB_ID_atBackupTime] = translationDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Translation file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Translation>id_atBckpTime_newID
// to compute new index
func (backRepoTranslation *BackRepoTranslationStruct) RestorePhaseTwo() {

	for _, translationDB := range *backRepoTranslation.Map_TranslationDBID_TranslationDB {

		// next line of code is to avert unused variable compilation error
		_ = translationDB

		// insertion point for reindexing pointers encoding
		// reindexing SourceCountryWithBodies field
		if translationDB.SourceCountryWithBodiesID.Int64 != 0 {
			translationDB.SourceCountryWithBodiesID.Int64 = int64(BackRepoCountryWithBodiesid_atBckpTime_newID[uint(translationDB.SourceCountryWithBodiesID.Int64)])
			translationDB.SourceCountryWithBodiesID.Valid = true
		}

		// reindexing TargetCountryWithBodies field
		if translationDB.TargetCountryWithBodiesID.Int64 != 0 {
			translationDB.TargetCountryWithBodiesID.Int64 = int64(BackRepoCountryWithBodiesid_atBckpTime_newID[uint(translationDB.TargetCountryWithBodiesID.Int64)])
			translationDB.TargetCountryWithBodiesID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoTranslation.db.Model(translationDB).Updates(*translationDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTranslationid_atBckpTime_newID map[uint]uint
