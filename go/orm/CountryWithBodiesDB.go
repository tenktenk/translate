// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/tenktenk/translate/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_CountryWithBodies_sql sql.NullBool
var dummy_CountryWithBodies_time time.Duration
var dummy_CountryWithBodies_sort sort.Float64Slice

// CountryWithBodiesAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model countrywithbodiesAPI
type CountryWithBodiesAPI struct {
	gorm.Model

	models.CountryWithBodies

	// encoding of pointers
	CountryWithBodiesPointersEnconding
}

// CountryWithBodiesPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type CountryWithBodiesPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// CountryWithBodiesDB describes a countrywithbodies in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model countrywithbodiesDB
type CountryWithBodiesDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field countrywithbodiesDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field countrywithbodiesDB.NCols {{BasicKind}} (to be completed)
	NCols_Data sql.NullInt64

	// Declation for basic field countrywithbodiesDB.NRows {{BasicKind}} (to be completed)
	NRows_Data sql.NullInt64

	// Declation for basic field countrywithbodiesDB.XllCorner {{BasicKind}} (to be completed)
	XllCorner_Data sql.NullFloat64

	// Declation for basic field countrywithbodiesDB.YllCorner {{BasicKind}} (to be completed)
	YllCorner_Data sql.NullFloat64

	// Declation for basic field countrywithbodiesDB.NbBodies {{BasicKind}} (to be completed)
	NbBodies_Data sql.NullInt64

	// Declation for basic field countrywithbodiesDB.Step {{BasicKind}} (to be completed)
	Step_Data sql.NullInt64
	// encoding of pointers
	CountryWithBodiesPointersEnconding
}

// CountryWithBodiesDBs arrays countrywithbodiesDBs
// swagger:response countrywithbodiesDBsResponse
type CountryWithBodiesDBs []CountryWithBodiesDB

// CountryWithBodiesDBResponse provides response
// swagger:response countrywithbodiesDBResponse
type CountryWithBodiesDBResponse struct {
	CountryWithBodiesDB
}

// CountryWithBodiesWOP is a CountryWithBodies without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type CountryWithBodiesWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	NCols int `xlsx:"2"`

	NRows int `xlsx:"3"`

	XllCorner float64 `xlsx:"4"`

	YllCorner float64 `xlsx:"5"`

	NbBodies int `xlsx:"6"`

	Step int `xlsx:"7"`
	// insertion for WOP pointer fields
}

var CountryWithBodies_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"NCols",
	"NRows",
	"XllCorner",
	"YllCorner",
	"NbBodies",
	"Step",
}

type BackRepoCountryWithBodiesStruct struct {
	// stores CountryWithBodiesDB according to their gorm ID
	Map_CountryWithBodiesDBID_CountryWithBodiesDB *map[uint]*CountryWithBodiesDB

	// stores CountryWithBodiesDB ID according to CountryWithBodies address
	Map_CountryWithBodiesPtr_CountryWithBodiesDBID *map[*models.CountryWithBodies]uint

	// stores CountryWithBodies according to their gorm ID
	Map_CountryWithBodiesDBID_CountryWithBodiesPtr *map[uint]*models.CountryWithBodies

	db *gorm.DB
}

func (backRepoCountryWithBodies *BackRepoCountryWithBodiesStruct) GetDB() *gorm.DB {
	return backRepoCountryWithBodies.db
}

// GetCountryWithBodiesDBFromCountryWithBodiesPtr is a handy function to access the back repo instance from the stage instance
func (backRepoCountryWithBodies *BackRepoCountryWithBodiesStruct) GetCountryWithBodiesDBFromCountryWithBodiesPtr(countrywithbodies *models.CountryWithBodies) (countrywithbodiesDB *CountryWithBodiesDB) {
	id := (*backRepoCountryWithBodies.Map_CountryWithBodiesPtr_CountryWithBodiesDBID)[countrywithbodies]
	countrywithbodiesDB = (*backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesDB)[id]
	return
}

// BackRepoCountryWithBodies.Init set up the BackRepo of the CountryWithBodies
func (backRepoCountryWithBodies *BackRepoCountryWithBodiesStruct) Init(db *gorm.DB) (Error error) {

	if backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesPtr != nil {
		err := errors.New("In Init, backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesPtr should be nil")
		return err
	}

	if backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesDB != nil {
		err := errors.New("In Init, backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesDB should be nil")
		return err
	}

	if backRepoCountryWithBodies.Map_CountryWithBodiesPtr_CountryWithBodiesDBID != nil {
		err := errors.New("In Init, backRepoCountryWithBodies.Map_CountryWithBodiesPtr_CountryWithBodiesDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.CountryWithBodies, 0)
	backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesPtr = &tmp

	tmpDB := make(map[uint]*CountryWithBodiesDB, 0)
	backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesDB = &tmpDB

	tmpID := make(map[*models.CountryWithBodies]uint, 0)
	backRepoCountryWithBodies.Map_CountryWithBodiesPtr_CountryWithBodiesDBID = &tmpID

	backRepoCountryWithBodies.db = db
	return
}

// BackRepoCountryWithBodies.CommitPhaseOne commits all staged instances of CountryWithBodies to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCountryWithBodies *BackRepoCountryWithBodiesStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for countrywithbodies := range stage.CountryWithBodiess {
		backRepoCountryWithBodies.CommitPhaseOneInstance(countrywithbodies)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, countrywithbodies := range *backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesPtr {
		if _, ok := stage.CountryWithBodiess[countrywithbodies]; !ok {
			backRepoCountryWithBodies.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoCountryWithBodies.CommitDeleteInstance commits deletion of CountryWithBodies to the BackRepo
func (backRepoCountryWithBodies *BackRepoCountryWithBodiesStruct) CommitDeleteInstance(id uint) (Error error) {

	countrywithbodies := (*backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesPtr)[id]

	// countrywithbodies is not staged anymore, remove countrywithbodiesDB
	countrywithbodiesDB := (*backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesDB)[id]
	query := backRepoCountryWithBodies.db.Unscoped().Delete(&countrywithbodiesDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoCountryWithBodies.Map_CountryWithBodiesPtr_CountryWithBodiesDBID), countrywithbodies)
	delete((*backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesPtr), id)
	delete((*backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesDB), id)

	return
}

// BackRepoCountryWithBodies.CommitPhaseOneInstance commits countrywithbodies staged instances of CountryWithBodies to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCountryWithBodies *BackRepoCountryWithBodiesStruct) CommitPhaseOneInstance(countrywithbodies *models.CountryWithBodies) (Error error) {

	// check if the countrywithbodies is not commited yet
	if _, ok := (*backRepoCountryWithBodies.Map_CountryWithBodiesPtr_CountryWithBodiesDBID)[countrywithbodies]; ok {
		return
	}

	// initiate countrywithbodies
	var countrywithbodiesDB CountryWithBodiesDB
	countrywithbodiesDB.CopyBasicFieldsFromCountryWithBodies(countrywithbodies)

	query := backRepoCountryWithBodies.db.Create(&countrywithbodiesDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoCountryWithBodies.Map_CountryWithBodiesPtr_CountryWithBodiesDBID)[countrywithbodies] = countrywithbodiesDB.ID
	(*backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesPtr)[countrywithbodiesDB.ID] = countrywithbodies
	(*backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesDB)[countrywithbodiesDB.ID] = &countrywithbodiesDB

	return
}

// BackRepoCountryWithBodies.CommitPhaseTwo commits all staged instances of CountryWithBodies to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCountryWithBodies *BackRepoCountryWithBodiesStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, countrywithbodies := range *backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesPtr {
		backRepoCountryWithBodies.CommitPhaseTwoInstance(backRepo, idx, countrywithbodies)
	}

	return
}

// BackRepoCountryWithBodies.CommitPhaseTwoInstance commits {{structname }} of models.CountryWithBodies to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCountryWithBodies *BackRepoCountryWithBodiesStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, countrywithbodies *models.CountryWithBodies) (Error error) {

	// fetch matching countrywithbodiesDB
	if countrywithbodiesDB, ok := (*backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesDB)[idx]; ok {

		countrywithbodiesDB.CopyBasicFieldsFromCountryWithBodies(countrywithbodies)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoCountryWithBodies.db.Save(&countrywithbodiesDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown CountryWithBodies intance %s", countrywithbodies.Name))
		return err
	}

	return
}

// BackRepoCountryWithBodies.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoCountryWithBodies *BackRepoCountryWithBodiesStruct) CheckoutPhaseOne() (Error error) {

	countrywithbodiesDBArray := make([]CountryWithBodiesDB, 0)
	query := backRepoCountryWithBodies.db.Find(&countrywithbodiesDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	countrywithbodiesInstancesToBeRemovedFromTheStage := make(map[*models.CountryWithBodies]struct{})
	for key, value := range models.Stage.CountryWithBodiess {
		countrywithbodiesInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, countrywithbodiesDB := range countrywithbodiesDBArray {
		backRepoCountryWithBodies.CheckoutPhaseOneInstance(&countrywithbodiesDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		countrywithbodies, ok := (*backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesPtr)[countrywithbodiesDB.ID]
		if ok {
			delete(countrywithbodiesInstancesToBeRemovedFromTheStage, countrywithbodies)
		}
	}

	// remove from stage and back repo's 3 maps all countrywithbodiess that are not in the checkout
	for countrywithbodies := range countrywithbodiesInstancesToBeRemovedFromTheStage {
		countrywithbodies.Unstage()

		// remove instance from the back repo 3 maps
		countrywithbodiesID := (*backRepoCountryWithBodies.Map_CountryWithBodiesPtr_CountryWithBodiesDBID)[countrywithbodies]
		delete((*backRepoCountryWithBodies.Map_CountryWithBodiesPtr_CountryWithBodiesDBID), countrywithbodies)
		delete((*backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesDB), countrywithbodiesID)
		delete((*backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesPtr), countrywithbodiesID)
	}

	return
}

// CheckoutPhaseOneInstance takes a countrywithbodiesDB that has been found in the DB, updates the backRepo and stages the
// models version of the countrywithbodiesDB
func (backRepoCountryWithBodies *BackRepoCountryWithBodiesStruct) CheckoutPhaseOneInstance(countrywithbodiesDB *CountryWithBodiesDB) (Error error) {

	countrywithbodies, ok := (*backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesPtr)[countrywithbodiesDB.ID]
	if !ok {
		countrywithbodies = new(models.CountryWithBodies)

		(*backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesPtr)[countrywithbodiesDB.ID] = countrywithbodies
		(*backRepoCountryWithBodies.Map_CountryWithBodiesPtr_CountryWithBodiesDBID)[countrywithbodies] = countrywithbodiesDB.ID

		// append model store with the new element
		countrywithbodies.Name = countrywithbodiesDB.Name_Data.String
		countrywithbodies.Stage()
	}
	countrywithbodiesDB.CopyBasicFieldsToCountryWithBodies(countrywithbodies)

	// preserve pointer to countrywithbodiesDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_CountryWithBodiesDBID_CountryWithBodiesDB)[countrywithbodiesDB hold variable pointers
	countrywithbodiesDB_Data := *countrywithbodiesDB
	preservedPtrToCountryWithBodies := &countrywithbodiesDB_Data
	(*backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesDB)[countrywithbodiesDB.ID] = preservedPtrToCountryWithBodies

	return
}

// BackRepoCountryWithBodies.CheckoutPhaseTwo Checkouts all staged instances of CountryWithBodies to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCountryWithBodies *BackRepoCountryWithBodiesStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, countrywithbodiesDB := range *backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesDB {
		backRepoCountryWithBodies.CheckoutPhaseTwoInstance(backRepo, countrywithbodiesDB)
	}
	return
}

// BackRepoCountryWithBodies.CheckoutPhaseTwoInstance Checkouts staged instances of CountryWithBodies to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCountryWithBodies *BackRepoCountryWithBodiesStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, countrywithbodiesDB *CountryWithBodiesDB) (Error error) {

	countrywithbodies := (*backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesPtr)[countrywithbodiesDB.ID]
	_ = countrywithbodies // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitCountryWithBodies allows commit of a single countrywithbodies (if already staged)
func (backRepo *BackRepoStruct) CommitCountryWithBodies(countrywithbodies *models.CountryWithBodies) {
	backRepo.BackRepoCountryWithBodies.CommitPhaseOneInstance(countrywithbodies)
	if id, ok := (*backRepo.BackRepoCountryWithBodies.Map_CountryWithBodiesPtr_CountryWithBodiesDBID)[countrywithbodies]; ok {
		backRepo.BackRepoCountryWithBodies.CommitPhaseTwoInstance(backRepo, id, countrywithbodies)
	}
}

// CommitCountryWithBodies allows checkout of a single countrywithbodies (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutCountryWithBodies(countrywithbodies *models.CountryWithBodies) {
	// check if the countrywithbodies is staged
	if _, ok := (*backRepo.BackRepoCountryWithBodies.Map_CountryWithBodiesPtr_CountryWithBodiesDBID)[countrywithbodies]; ok {

		if id, ok := (*backRepo.BackRepoCountryWithBodies.Map_CountryWithBodiesPtr_CountryWithBodiesDBID)[countrywithbodies]; ok {
			var countrywithbodiesDB CountryWithBodiesDB
			countrywithbodiesDB.ID = id

			if err := backRepo.BackRepoCountryWithBodies.db.First(&countrywithbodiesDB, id).Error; err != nil {
				log.Panicln("CheckoutCountryWithBodies : Problem with getting object with id:", id)
			}
			backRepo.BackRepoCountryWithBodies.CheckoutPhaseOneInstance(&countrywithbodiesDB)
			backRepo.BackRepoCountryWithBodies.CheckoutPhaseTwoInstance(backRepo, &countrywithbodiesDB)
		}
	}
}

// CopyBasicFieldsFromCountryWithBodies
func (countrywithbodiesDB *CountryWithBodiesDB) CopyBasicFieldsFromCountryWithBodies(countrywithbodies *models.CountryWithBodies) {
	// insertion point for fields commit

	countrywithbodiesDB.Name_Data.String = countrywithbodies.Name
	countrywithbodiesDB.Name_Data.Valid = true

	countrywithbodiesDB.NCols_Data.Int64 = int64(countrywithbodies.NCols)
	countrywithbodiesDB.NCols_Data.Valid = true

	countrywithbodiesDB.NRows_Data.Int64 = int64(countrywithbodies.NRows)
	countrywithbodiesDB.NRows_Data.Valid = true

	countrywithbodiesDB.XllCorner_Data.Float64 = countrywithbodies.XllCorner
	countrywithbodiesDB.XllCorner_Data.Valid = true

	countrywithbodiesDB.YllCorner_Data.Float64 = countrywithbodies.YllCorner
	countrywithbodiesDB.YllCorner_Data.Valid = true

	countrywithbodiesDB.NbBodies_Data.Int64 = int64(countrywithbodies.NbBodies)
	countrywithbodiesDB.NbBodies_Data.Valid = true

	countrywithbodiesDB.Step_Data.Int64 = int64(countrywithbodies.Step)
	countrywithbodiesDB.Step_Data.Valid = true
}

// CopyBasicFieldsFromCountryWithBodiesWOP
func (countrywithbodiesDB *CountryWithBodiesDB) CopyBasicFieldsFromCountryWithBodiesWOP(countrywithbodies *CountryWithBodiesWOP) {
	// insertion point for fields commit

	countrywithbodiesDB.Name_Data.String = countrywithbodies.Name
	countrywithbodiesDB.Name_Data.Valid = true

	countrywithbodiesDB.NCols_Data.Int64 = int64(countrywithbodies.NCols)
	countrywithbodiesDB.NCols_Data.Valid = true

	countrywithbodiesDB.NRows_Data.Int64 = int64(countrywithbodies.NRows)
	countrywithbodiesDB.NRows_Data.Valid = true

	countrywithbodiesDB.XllCorner_Data.Float64 = countrywithbodies.XllCorner
	countrywithbodiesDB.XllCorner_Data.Valid = true

	countrywithbodiesDB.YllCorner_Data.Float64 = countrywithbodies.YllCorner
	countrywithbodiesDB.YllCorner_Data.Valid = true

	countrywithbodiesDB.NbBodies_Data.Int64 = int64(countrywithbodies.NbBodies)
	countrywithbodiesDB.NbBodies_Data.Valid = true

	countrywithbodiesDB.Step_Data.Int64 = int64(countrywithbodies.Step)
	countrywithbodiesDB.Step_Data.Valid = true
}

// CopyBasicFieldsToCountryWithBodies
func (countrywithbodiesDB *CountryWithBodiesDB) CopyBasicFieldsToCountryWithBodies(countrywithbodies *models.CountryWithBodies) {
	// insertion point for checkout of basic fields (back repo to stage)
	countrywithbodies.Name = countrywithbodiesDB.Name_Data.String
	countrywithbodies.NCols = int(countrywithbodiesDB.NCols_Data.Int64)
	countrywithbodies.NRows = int(countrywithbodiesDB.NRows_Data.Int64)
	countrywithbodies.XllCorner = countrywithbodiesDB.XllCorner_Data.Float64
	countrywithbodies.YllCorner = countrywithbodiesDB.YllCorner_Data.Float64
	countrywithbodies.NbBodies = int(countrywithbodiesDB.NbBodies_Data.Int64)
	countrywithbodies.Step = int(countrywithbodiesDB.Step_Data.Int64)
}

// CopyBasicFieldsToCountryWithBodiesWOP
func (countrywithbodiesDB *CountryWithBodiesDB) CopyBasicFieldsToCountryWithBodiesWOP(countrywithbodies *CountryWithBodiesWOP) {
	countrywithbodies.ID = int(countrywithbodiesDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	countrywithbodies.Name = countrywithbodiesDB.Name_Data.String
	countrywithbodies.NCols = int(countrywithbodiesDB.NCols_Data.Int64)
	countrywithbodies.NRows = int(countrywithbodiesDB.NRows_Data.Int64)
	countrywithbodies.XllCorner = countrywithbodiesDB.XllCorner_Data.Float64
	countrywithbodies.YllCorner = countrywithbodiesDB.YllCorner_Data.Float64
	countrywithbodies.NbBodies = int(countrywithbodiesDB.NbBodies_Data.Int64)
	countrywithbodies.Step = int(countrywithbodiesDB.Step_Data.Int64)
}

// Backup generates a json file from a slice of all CountryWithBodiesDB instances in the backrepo
func (backRepoCountryWithBodies *BackRepoCountryWithBodiesStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "CountryWithBodiesDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CountryWithBodiesDB, 0)
	for _, countrywithbodiesDB := range *backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesDB {
		forBackup = append(forBackup, countrywithbodiesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json CountryWithBodies ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json CountryWithBodies file", err.Error())
	}
}

// Backup generates a json file from a slice of all CountryWithBodiesDB instances in the backrepo
func (backRepoCountryWithBodies *BackRepoCountryWithBodiesStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CountryWithBodiesDB, 0)
	for _, countrywithbodiesDB := range *backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesDB {
		forBackup = append(forBackup, countrywithbodiesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("CountryWithBodies")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&CountryWithBodies_Fields, -1)
	for _, countrywithbodiesDB := range forBackup {

		var countrywithbodiesWOP CountryWithBodiesWOP
		countrywithbodiesDB.CopyBasicFieldsToCountryWithBodiesWOP(&countrywithbodiesWOP)

		row := sh.AddRow()
		row.WriteStruct(&countrywithbodiesWOP, -1)
	}
}

// RestoreXL from the "CountryWithBodies" sheet all CountryWithBodiesDB instances
func (backRepoCountryWithBodies *BackRepoCountryWithBodiesStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoCountryWithBodiesid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["CountryWithBodies"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoCountryWithBodies.rowVisitorCountryWithBodies)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoCountryWithBodies *BackRepoCountryWithBodiesStruct) rowVisitorCountryWithBodies(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var countrywithbodiesWOP CountryWithBodiesWOP
		row.ReadStruct(&countrywithbodiesWOP)

		// add the unmarshalled struct to the stage
		countrywithbodiesDB := new(CountryWithBodiesDB)
		countrywithbodiesDB.CopyBasicFieldsFromCountryWithBodiesWOP(&countrywithbodiesWOP)

		countrywithbodiesDB_ID_atBackupTime := countrywithbodiesDB.ID
		countrywithbodiesDB.ID = 0
		query := backRepoCountryWithBodies.db.Create(countrywithbodiesDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesDB)[countrywithbodiesDB.ID] = countrywithbodiesDB
		BackRepoCountryWithBodiesid_atBckpTime_newID[countrywithbodiesDB_ID_atBackupTime] = countrywithbodiesDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "CountryWithBodiesDB.json" in dirPath that stores an array
// of CountryWithBodiesDB and stores it in the database
// the map BackRepoCountryWithBodiesid_atBckpTime_newID is updated accordingly
func (backRepoCountryWithBodies *BackRepoCountryWithBodiesStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoCountryWithBodiesid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "CountryWithBodiesDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json CountryWithBodies file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*CountryWithBodiesDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_CountryWithBodiesDBID_CountryWithBodiesDB
	for _, countrywithbodiesDB := range forRestore {

		countrywithbodiesDB_ID_atBackupTime := countrywithbodiesDB.ID
		countrywithbodiesDB.ID = 0
		query := backRepoCountryWithBodies.db.Create(countrywithbodiesDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesDB)[countrywithbodiesDB.ID] = countrywithbodiesDB
		BackRepoCountryWithBodiesid_atBckpTime_newID[countrywithbodiesDB_ID_atBackupTime] = countrywithbodiesDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json CountryWithBodies file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<CountryWithBodies>id_atBckpTime_newID
// to compute new index
func (backRepoCountryWithBodies *BackRepoCountryWithBodiesStruct) RestorePhaseTwo() {

	for _, countrywithbodiesDB := range *backRepoCountryWithBodies.Map_CountryWithBodiesDBID_CountryWithBodiesDB {

		// next line of code is to avert unused variable compilation error
		_ = countrywithbodiesDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoCountryWithBodies.db.Model(countrywithbodiesDB).Updates(*countrywithbodiesDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoCountryWithBodiesid_atBckpTime_newID map[uint]uint
