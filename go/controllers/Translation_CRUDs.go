// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/tenktenk/translate/go/models"
	"github.com/tenktenk/translate/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Translation__dummysDeclaration__ models.Translation
var __Translation_time__dummyDeclaration time.Duration

// An TranslationID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getTranslation updateTranslation deleteTranslation
type TranslationID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// TranslationInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postTranslation updateTranslation
type TranslationInput struct {
	// The Translation to submit or modify
	// in: body
	Translation *orm.TranslationAPI
}

// GetTranslations
//
// swagger:route GET /translations translations getTranslations
//
// Get all translations
//
// Responses:
//    default: genericError
//        200: translationDBsResponse
func GetTranslations(c *gin.Context) {
	db := orm.BackRepo.BackRepoTranslation.GetDB()

	// source slice
	var translationDBs []orm.TranslationDB
	query := db.Find(&translationDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	translationAPIs := make([]orm.TranslationAPI, 0)

	// for each translation, update fields from the database nullable fields
	for idx := range translationDBs {
		translationDB := &translationDBs[idx]
		_ = translationDB
		var translationAPI orm.TranslationAPI

		// insertion point for updating fields
		translationAPI.ID = translationDB.ID
		translationDB.CopyBasicFieldsToTranslation(&translationAPI.Translation)
		translationAPI.TranslationPointersEnconding = translationDB.TranslationPointersEnconding
		translationAPIs = append(translationAPIs, translationAPI)
	}

	c.JSON(http.StatusOK, translationAPIs)
}

// PostTranslation
//
// swagger:route POST /translations translations postTranslation
//
// Creates a translation
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: translationDBResponse
func PostTranslation(c *gin.Context) {
	db := orm.BackRepo.BackRepoTranslation.GetDB()

	// Validate input
	var input orm.TranslationAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create translation
	translationDB := orm.TranslationDB{}
	translationDB.TranslationPointersEnconding = input.TranslationPointersEnconding
	translationDB.CopyBasicFieldsFromTranslation(&input.Translation)

	query := db.Create(&translationDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, translationDB)
}

// GetTranslation
//
// swagger:route GET /translations/{ID} translations getTranslation
//
// Gets the details for a translation.
//
// Responses:
//    default: genericError
//        200: translationDBResponse
func GetTranslation(c *gin.Context) {
	db := orm.BackRepo.BackRepoTranslation.GetDB()

	// Get translationDB in DB
	var translationDB orm.TranslationDB
	if err := db.First(&translationDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var translationAPI orm.TranslationAPI
	translationAPI.ID = translationDB.ID
	translationAPI.TranslationPointersEnconding = translationDB.TranslationPointersEnconding
	translationDB.CopyBasicFieldsToTranslation(&translationAPI.Translation)

	c.JSON(http.StatusOK, translationAPI)
}

// UpdateTranslation
//
// swagger:route PATCH /translations/{ID} translations updateTranslation
//
// Update a translation
//
// Responses:
//    default: genericError
//        200: translationDBResponse
func UpdateTranslation(c *gin.Context) {
	db := orm.BackRepo.BackRepoTranslation.GetDB()

	// Get model if exist
	var translationDB orm.TranslationDB

	// fetch the translation
	query := db.First(&translationDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.TranslationAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	translationDB.CopyBasicFieldsFromTranslation(&input.Translation)
	translationDB.TranslationPointersEnconding = input.TranslationPointersEnconding

	query = db.Model(&translationDB).Updates(translationDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the translationDB
	c.JSON(http.StatusOK, translationDB)
}

// DeleteTranslation
//
// swagger:route DELETE /translations/{ID} translations deleteTranslation
//
// Delete a translation
//
// Responses:
//    default: genericError
func DeleteTranslation(c *gin.Context) {
	db := orm.BackRepo.BackRepoTranslation.GetDB()

	// Get model if exist
	var translationDB orm.TranslationDB
	if err := db.First(&translationDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&translationDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
