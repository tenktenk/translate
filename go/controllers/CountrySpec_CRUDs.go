// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/tenktenk/translate/go/models"
	"github.com/tenktenk/translate/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __CountrySpec__dummysDeclaration__ models.CountrySpec
var __CountrySpec_time__dummyDeclaration time.Duration

// An CountrySpecID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getCountrySpec updateCountrySpec deleteCountrySpec
type CountrySpecID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// CountrySpecInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postCountrySpec updateCountrySpec
type CountrySpecInput struct {
	// The CountrySpec to submit or modify
	// in: body
	CountrySpec *orm.CountrySpecAPI
}

// GetCountrySpecs
//
// swagger:route GET /countryspecs countryspecs getCountrySpecs
//
// Get all countryspecs
//
// Responses:
//    default: genericError
//        200: countryspecDBsResponse
func GetCountrySpecs(c *gin.Context) {
	db := orm.BackRepo.BackRepoCountrySpec.GetDB()

	// source slice
	var countryspecDBs []orm.CountrySpecDB
	query := db.Find(&countryspecDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	countryspecAPIs := make([]orm.CountrySpecAPI, 0)

	// for each countryspec, update fields from the database nullable fields
	for idx := range countryspecDBs {
		countryspecDB := &countryspecDBs[idx]
		_ = countryspecDB
		var countryspecAPI orm.CountrySpecAPI

		// insertion point for updating fields
		countryspecAPI.ID = countryspecDB.ID
		countryspecDB.CopyBasicFieldsToCountrySpec(&countryspecAPI.CountrySpec)
		countryspecAPI.CountrySpecPointersEnconding = countryspecDB.CountrySpecPointersEnconding
		countryspecAPIs = append(countryspecAPIs, countryspecAPI)
	}

	c.JSON(http.StatusOK, countryspecAPIs)
}

// PostCountrySpec
//
// swagger:route POST /countryspecs countryspecs postCountrySpec
//
// Creates a countryspec
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: countryspecDBResponse
func PostCountrySpec(c *gin.Context) {
	db := orm.BackRepo.BackRepoCountrySpec.GetDB()

	// Validate input
	var input orm.CountrySpecAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create countryspec
	countryspecDB := orm.CountrySpecDB{}
	countryspecDB.CountrySpecPointersEnconding = input.CountrySpecPointersEnconding
	countryspecDB.CopyBasicFieldsFromCountrySpec(&input.CountrySpec)

	query := db.Create(&countryspecDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, countryspecDB)
}

// GetCountrySpec
//
// swagger:route GET /countryspecs/{ID} countryspecs getCountrySpec
//
// Gets the details for a countryspec.
//
// Responses:
//    default: genericError
//        200: countryspecDBResponse
func GetCountrySpec(c *gin.Context) {
	db := orm.BackRepo.BackRepoCountrySpec.GetDB()

	// Get countryspecDB in DB
	var countryspecDB orm.CountrySpecDB
	if err := db.First(&countryspecDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var countryspecAPI orm.CountrySpecAPI
	countryspecAPI.ID = countryspecDB.ID
	countryspecAPI.CountrySpecPointersEnconding = countryspecDB.CountrySpecPointersEnconding
	countryspecDB.CopyBasicFieldsToCountrySpec(&countryspecAPI.CountrySpec)

	c.JSON(http.StatusOK, countryspecAPI)
}

// UpdateCountrySpec
//
// swagger:route PATCH /countryspecs/{ID} countryspecs updateCountrySpec
//
// Update a countryspec
//
// Responses:
//    default: genericError
//        200: countryspecDBResponse
func UpdateCountrySpec(c *gin.Context) {
	db := orm.BackRepo.BackRepoCountrySpec.GetDB()

	// Get model if exist
	var countryspecDB orm.CountrySpecDB

	// fetch the countryspec
	query := db.First(&countryspecDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.CountrySpecAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	countryspecDB.CopyBasicFieldsFromCountrySpec(&input.CountrySpec)
	countryspecDB.CountrySpecPointersEnconding = input.CountrySpecPointersEnconding

	query = db.Model(&countryspecDB).Updates(countryspecDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the countryspecDB
	c.JSON(http.StatusOK, countryspecDB)
}

// DeleteCountrySpec
//
// swagger:route DELETE /countryspecs/{ID} countryspecs deleteCountrySpec
//
// Delete a countryspec
//
// Responses:
//    default: genericError
func DeleteCountrySpec(c *gin.Context) {
	db := orm.BackRepo.BackRepoCountrySpec.GetDB()

	// Get model if exist
	var countryspecDB orm.CountrySpecDB
	if err := db.First(&countryspecDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&countryspecDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
