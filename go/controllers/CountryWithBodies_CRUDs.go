// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/tenktenk/translate/go/models"
	"github.com/tenktenk/translate/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __CountryWithBodies__dummysDeclaration__ models.CountryWithBodies
var __CountryWithBodies_time__dummyDeclaration time.Duration

// An CountryWithBodiesID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getCountryWithBodies updateCountryWithBodies deleteCountryWithBodies
type CountryWithBodiesID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// CountryWithBodiesInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postCountryWithBodies updateCountryWithBodies
type CountryWithBodiesInput struct {
	// The CountryWithBodies to submit or modify
	// in: body
	CountryWithBodies *orm.CountryWithBodiesAPI
}

// GetCountryWithBodiess
//
// swagger:route GET /countrywithbodiess countrywithbodiess getCountryWithBodiess
//
// Get all countrywithbodiess
//
// Responses:
//    default: genericError
//        200: countrywithbodiesDBsResponse
func GetCountryWithBodiess(c *gin.Context) {
	db := orm.BackRepo.BackRepoCountryWithBodies.GetDB()

	// source slice
	var countrywithbodiesDBs []orm.CountryWithBodiesDB
	query := db.Find(&countrywithbodiesDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	countrywithbodiesAPIs := make([]orm.CountryWithBodiesAPI, 0)

	// for each countrywithbodies, update fields from the database nullable fields
	for idx := range countrywithbodiesDBs {
		countrywithbodiesDB := &countrywithbodiesDBs[idx]
		_ = countrywithbodiesDB
		var countrywithbodiesAPI orm.CountryWithBodiesAPI

		// insertion point for updating fields
		countrywithbodiesAPI.ID = countrywithbodiesDB.ID
		countrywithbodiesDB.CopyBasicFieldsToCountryWithBodies(&countrywithbodiesAPI.CountryWithBodies)
		countrywithbodiesAPI.CountryWithBodiesPointersEnconding = countrywithbodiesDB.CountryWithBodiesPointersEnconding
		countrywithbodiesAPIs = append(countrywithbodiesAPIs, countrywithbodiesAPI)
	}

	c.JSON(http.StatusOK, countrywithbodiesAPIs)
}

// PostCountryWithBodies
//
// swagger:route POST /countrywithbodiess countrywithbodiess postCountryWithBodies
//
// Creates a countrywithbodies
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: countrywithbodiesDBResponse
func PostCountryWithBodies(c *gin.Context) {
	db := orm.BackRepo.BackRepoCountryWithBodies.GetDB()

	// Validate input
	var input orm.CountryWithBodiesAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create countrywithbodies
	countrywithbodiesDB := orm.CountryWithBodiesDB{}
	countrywithbodiesDB.CountryWithBodiesPointersEnconding = input.CountryWithBodiesPointersEnconding
	countrywithbodiesDB.CopyBasicFieldsFromCountryWithBodies(&input.CountryWithBodies)

	query := db.Create(&countrywithbodiesDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, countrywithbodiesDB)
}

// GetCountryWithBodies
//
// swagger:route GET /countrywithbodiess/{ID} countrywithbodiess getCountryWithBodies
//
// Gets the details for a countrywithbodies.
//
// Responses:
//    default: genericError
//        200: countrywithbodiesDBResponse
func GetCountryWithBodies(c *gin.Context) {
	db := orm.BackRepo.BackRepoCountryWithBodies.GetDB()

	// Get countrywithbodiesDB in DB
	var countrywithbodiesDB orm.CountryWithBodiesDB
	if err := db.First(&countrywithbodiesDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var countrywithbodiesAPI orm.CountryWithBodiesAPI
	countrywithbodiesAPI.ID = countrywithbodiesDB.ID
	countrywithbodiesAPI.CountryWithBodiesPointersEnconding = countrywithbodiesDB.CountryWithBodiesPointersEnconding
	countrywithbodiesDB.CopyBasicFieldsToCountryWithBodies(&countrywithbodiesAPI.CountryWithBodies)

	c.JSON(http.StatusOK, countrywithbodiesAPI)
}

// UpdateCountryWithBodies
//
// swagger:route PATCH /countrywithbodiess/{ID} countrywithbodiess updateCountryWithBodies
//
// Update a countrywithbodies
//
// Responses:
//    default: genericError
//        200: countrywithbodiesDBResponse
func UpdateCountryWithBodies(c *gin.Context) {
	db := orm.BackRepo.BackRepoCountryWithBodies.GetDB()

	// Get model if exist
	var countrywithbodiesDB orm.CountryWithBodiesDB

	// fetch the countrywithbodies
	query := db.First(&countrywithbodiesDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.CountryWithBodiesAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	countrywithbodiesDB.CopyBasicFieldsFromCountryWithBodies(&input.CountryWithBodies)
	countrywithbodiesDB.CountryWithBodiesPointersEnconding = input.CountryWithBodiesPointersEnconding

	query = db.Model(&countrywithbodiesDB).Updates(countrywithbodiesDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the countrywithbodiesDB
	c.JSON(http.StatusOK, countrywithbodiesDB)
}

// DeleteCountryWithBodies
//
// swagger:route DELETE /countrywithbodiess/{ID} countrywithbodiess deleteCountryWithBodies
//
// Delete a countrywithbodies
//
// Responses:
//    default: genericError
func DeleteCountryWithBodies(c *gin.Context) {
	db := orm.BackRepo.BackRepoCountryWithBodies.GetDB()

	// Get model if exist
	var countrywithbodiesDB orm.CountryWithBodiesDB
	if err := db.First(&countrywithbodiesDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&countrywithbodiesDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
